diff --git a/library/executor/cp_executor_proxy.e b/library/executor/cp_executor_proxy.e
index dc07ff6..bd360c3 100644
--- a/library/executor/cp_executor_proxy.e
+++ b/library/executor/cp_executor_proxy.e
@@ -14,12 +14,22 @@ inherit
 	CP_GLOBAL_PROCESSORS
 
 	CP_PROXY [CP_EXECUTOR, CP_EXECUTOR_UTILS]
+		redefine
+			make
+		end
 
 create
 	make, make_global
 
 feature {NONE} -- Initialization
 
+	make (a_subject: like subject)
+			-- <Precursor>
+		do
+			Precursor (a_subject)
+			disable_private_processor
+		end
+
 	make_global
 			-- Initialize `Current' with the global worker pool.
 		local
@@ -29,10 +39,33 @@ feature {NONE} -- Initialization
 			make (l_procs.global_worker_pool)
 		end
 
+feature -- Status report
+
+	has_private_promise_processor: BOOLEAN
+			-- Does `Current' use its private processor for promise objects?
+		do
+			Result := my_promise_processor /= promise_processor
+		end
+
+feature -- Status setting
+
+	enable_private_processor
+			-- Use a private processor for promise objects.
+		do
+			create my_promise_processor
+		end
+
+	disable_private_processor
+			-- Use the global processor for promise objects.
+		do
+			my_promise_processor := promise_processor
+		end
+
 feature -- Basic operations
 
 	put (a_task: separate CP_TASK)
 			-- <Precursor>
+			-- May block if full.
 		do
 			utils.executor_put (subject, a_task)
 		end
@@ -42,7 +75,7 @@ feature -- Basic operations
 		local
 			l_promise: separate CP_SHARED_PROMISE
 		do
-			l_promise := new_promise (promise_processor)
+			l_promise := new_promise (my_promise_processor)
 			a_task.set_promise (l_promise)
 			create Result.make (l_promise)
 			put (a_task)
@@ -56,4 +89,9 @@ feature -- Basic operations
 			utils.executor_stop (subject)
 		end
 
+feature {NONE} -- Implementation
+
+	my_promise_processor: separate CP_PROMISE_UTILS
+			-- The processor to be used for promise objects.
+
 end
diff --git a/library/executor/cp_future_executor_proxy.e b/library/executor/cp_future_executor_proxy.e
index f7e968c..f3a0f0b 100644
--- a/library/executor/cp_future_executor_proxy.e
+++ b/library/executor/cp_future_executor_proxy.e
@@ -10,10 +10,30 @@ class
 inherit
 
 	CP_EXECUTOR_PROXY
+		redefine
+			enable_private_processor,
+			disable_private_processor
+		end
 
 create
 	make, make_global
 
+feature -- Status setting
+
+	enable_private_processor
+			-- Use a private processor for promise objects.
+		do
+			Precursor
+			create my_result_promise_processor
+		end
+
+	disable_private_processor
+			-- Use the global processor for promise objects.
+		do
+			Precursor
+			my_result_promise_processor := result_promise_processor
+		end
+
 feature -- Basic operations
 
 	put_future (a_computation: separate CP_COMPUTATION [G]): CP_RESULT_PROMISE_PROXY [G, IMPORTER]
@@ -25,14 +45,14 @@ feature -- Basic operations
 		do
 				-- Create a promise on the global result processor.
 			create l_template_promise.make
-			l_importable := new_result_promise (result_promise_processor, l_template_promise)
+			l_importable := new_result_promise (my_result_promise_processor, l_template_promise)
 
 				-- Check must succeed because we're importing based on the dynamic type.
 			check attached {separate CP_SHARED_RESULT_PROMISE [G, IMPORTER]} l_importable as l_checked then
 				l_promise := l_checked
 			end
 
-				-- Initialiye the computation and the result.
+				-- Initialize the computation and the result.
 			a_computation.set_promise (l_promise)
 
 			create Result.make (l_promise)
@@ -43,4 +63,9 @@ feature -- Basic operations
 			same_promise: Result.subject = a_computation.promise
 		end
 
+feature {NONE} -- Implementation
+
+	my_result_promise_processor: separate CP_DYNAMIC_TYPE_IMPORTER [CP_IMPORTABLE]
+			-- The processor to be used for result promise objects.
+
 end
